{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CamilaPessoa\\\\Documents\\\\Futureproof\\\\get_quizzical\\\\lets-get-quizzical\\\\front-end-lets-get-quizzical\\\\src\\\\Socket-io.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000');\n\nconst Socket = () => {\n  _s();\n\n  const [isConnected, setIsConnected] = useState(socket.connected);\n  const [lastPong, setLastPong] = useState(null);\n  useEffect(() => {\n    socket.on('connect', () => {\n      setIsConnected(true); // socket.emit() => send any EVENT to server\n    }); // If answer correct => socket.emit(score = score +1)\n    // we can use socket for waiting room and for dynamic scores\n    // display message\n    // socket.emit('join-room', room) room you want to join\n    //user type name of room so users with the same room name are connected\n\n    socket.on('admin-message', msg => console.log(msg));\n    socket.on('disconnect', () => {\n      setIsConnected(false);\n    });\n    socket.on('pong', () => {\n      setLastPong(new Date().toISOString());\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('pong');\n    };\n  }, []);\n\n  const sendPing = () => {\n    socket.emit('ping');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected: \", '' + isConnected]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Last pong: \", lastPong || '-']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendPing,\n      children: \"Send ping\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Socket, \"bAkfofLIRi3o7pzhagJZp5wiP5k=\");\n\n_c = Socket;\nexport default Socket;\n\nvar _c;\n\n$RefreshReg$(_c, \"Socket\");","map":{"version":3,"names":["React","useState","useEffect","io","socket","Socket","isConnected","setIsConnected","connected","lastPong","setLastPong","on","msg","console","log","Date","toISOString","off","sendPing","emit"],"sources":["C:/Users/CamilaPessoa/Documents/Futureproof/get_quizzical/lets-get-quizzical/front-end-lets-get-quizzical/src/Socket-io.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000');\n\nconst Socket = () => {\n    const [isConnected, setIsConnected] = useState(socket.connected);\n    const [lastPong, setLastPong] = useState(null);\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            setIsConnected(true);\n            // socket.emit() => send any EVENT to server\n        });\n        // If answer correct => socket.emit(score = score +1)\n        // we can use socket for waiting room and for dynamic scores\n        // display message\n        // socket.emit('join-room', room) room you want to join\n        //user type name of room so users with the same room name are connected\n        \n        socket.on('admin-message', msg => console.log(msg))\n\n        socket.on('disconnect', () => {\n            setIsConnected(false);\n        });\n\n        socket.on('pong', () => {\n            setLastPong(new Date().toISOString());\n        });\n\n        return () => {\n            socket.off('connect');\n            socket.off('disconnect');\n            socket.off('pong');\n        };\n    }, []);\n\n    const sendPing = () => {\n        socket.emit('ping');\n    }\n\n    return (\n        <div>\n            <p>Connected: {'' + isConnected}</p>\n            <p>Last pong: {lastPong || '-'}</p>\n            <button onClick={sendPing}>Send ping</button>\n        </div>\n    )\n};\n\nexport default Socket\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,MAAM,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAACG,MAAM,CAACI,SAAR,CAA9C;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;EAEAC,SAAS,CAAC,MAAM;IACZE,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,MAAM;MACvBJ,cAAc,CAAC,IAAD,CAAd,CADuB,CAEvB;IACH,CAHD,EADY,CAKZ;IACA;IACA;IACA;IACA;;IAEAH,MAAM,CAACO,EAAP,CAAU,eAAV,EAA2BC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAlC;IAEAR,MAAM,CAACO,EAAP,CAAU,YAAV,EAAwB,MAAM;MAC1BJ,cAAc,CAAC,KAAD,CAAd;IACH,CAFD;IAIAH,MAAM,CAACO,EAAP,CAAU,MAAV,EAAkB,MAAM;MACpBD,WAAW,CAAC,IAAIK,IAAJ,GAAWC,WAAX,EAAD,CAAX;IACH,CAFD;IAIA,OAAO,MAAM;MACTZ,MAAM,CAACa,GAAP,CAAW,SAAX;MACAb,MAAM,CAACa,GAAP,CAAW,YAAX;MACAb,MAAM,CAACa,GAAP,CAAW,MAAX;IACH,CAJD;EAKH,CA1BQ,EA0BN,EA1BM,CAAT;;EA4BA,MAAMC,QAAQ,GAAG,MAAM;IACnBd,MAAM,CAACe,IAAP,CAAY,MAAZ;EACH,CAFD;;EAIA,oBACI;IAAA,wBACI;MAAA,0BAAe,KAAKb,WAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,0BAAeG,QAAQ,IAAI,GAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAQ,OAAO,EAAES,QAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CA3CD;;GAAMb,M;;KAAAA,M;AA6CN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}